# Docker Compose configuration for Model Card Generator
# Provides complete development and testing environment

version: '3.8'

services:
  # ============================================================================
  # Main application service
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-01-27}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-dev}
    image: terragonlabs/modelcard-generator:${VERSION:-latest}
    container_name: mcg-app
    restart: unless-stopped
    environment:
      - MCG_ENVIRONMENT=development
      - MCG_LOG_LEVEL=INFO
      - MCG_OUTPUT_DIR=/app/output
      - MCG_CACHE_DIR=/app/cache
      - MCG_CUSTOM_TEMPLATES_DIR=/app/templates
      - MCG_ENABLE_METRICS=true
      - PYTHONPATH=/app
    volumes:
      - ./output:/app/output
      - ./examples:/app/examples:ro
      - ./templates:/app/templates:ro
      - mcg-cache:/app/cache
    networks:
      - mcg-network
    healthcheck:
      test: ["CMD", "mcg", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ============================================================================
  # Development service with source code mounted
  # ============================================================================
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: terragonlabs/modelcard-generator:dev
    container_name: mcg-dev
    restart: unless-stopped
    environment:
      - MCG_ENVIRONMENT=development
      - MCG_LOG_LEVEL=DEBUG
      - MCG_DEBUG=true
      - MCG_ENABLE_PROFILING=true
      - PYTHONPATH=/app/src
    volumes:
      - .:/app/src
      - ./output:/app/output
      - ./examples:/app/examples
      - ./tests:/app/tests
      - mcg-cache:/app/cache
      - mcg-dev-cache:/home/mcg/.cache
    working_dir: /app/src
    command: ["tail", "-f", "/dev/null"]  # Keep container running
    networks:
      - mcg-network
    profiles:
      - dev

  # ============================================================================
  # Testing service for CI/CD
  # ============================================================================
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: cicd
    image: terragonlabs/modelcard-generator:test
    container_name: mcg-test
    environment:
      - MCG_ENVIRONMENT=test
      - MCG_LOG_LEVEL=INFO
      - CI=true
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ./test-results:/app/test-results
      - ./coverage-reports:/app/coverage-reports
    command: |
      bash -c "
        echo 'Running comprehensive test suite...'
        python -m pytest --cov=modelcard_generator --cov-report=xml --cov-report=html --junitxml=test-results/junit.xml -v
        echo 'Running security scans...'
        bandit -r src/ -f json -o test-results/bandit-report.json || true
        safety check --json --output test-results/safety-report.json || true
        echo 'Tests completed!'
      "
    networks:
      - mcg-network
    profiles:
      - test

  # ============================================================================
  # Documentation service
  # ============================================================================
  docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: docs
    image: terragonlabs/modelcard-generator:docs
    container_name: mcg-docs
    restart: unless-stopped
    environment:
      - MKDOCS_DEV_ADDR=0.0.0.0:8000
    volumes:
      - ./docs:/app/docs
      - ./README.md:/app/README.md:ro
      - ./mkdocs.yml:/app/mkdocs.yml:ro
    ports:
      - "8000:8000"
    networks:
      - mcg-network
    profiles:
      - docs

  # ============================================================================
  # ML Platform integrations for testing
  # ============================================================================
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.0
    container_name: mcg-mlflow
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-data:/mlflow
    command: |
      bash -c "
        mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow/mlflow.db --default-artifact-root /mlflow/artifacts --serve-artifacts
      "
    networks:
      - mcg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - mlops
      - integration

  # ============================================================================
  # Redis for caching (optional)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: mcg-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - mcg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache
      - full

  # ============================================================================
  # Prometheus for metrics (optional)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mcg-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - mcg-network
    profiles:
      - monitoring
      - full

  # ============================================================================
  # Grafana for visualization (optional)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: mcg-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - mcg-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
      - full

  # ============================================================================
  # MinIO for S3-compatible storage (optional)
  # ============================================================================
  minio:
    image: minio/minio:latest
    container_name: mcg-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - mcg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - storage
      - full

# ============================================================================
# Network configuration
# ============================================================================
networks:
  mcg-network:
    driver: bridge
    name: mcg-network

# ============================================================================
# Volume configuration
# ============================================================================
volumes:
  mcg-cache:
    driver: local
    name: mcg-cache
  mcg-dev-cache:
    driver: local
    name: mcg-dev-cache
  mlflow-data:
    driver: local
    name: mcg-mlflow-data
  redis-data:
    driver: local
    name: mcg-redis-data
  prometheus-data:
    driver: local
    name: mcg-prometheus-data
  grafana-data:
    driver: local
    name: mcg-grafana-data
  minio-data:
    driver: local
    name: mcg-minio-data