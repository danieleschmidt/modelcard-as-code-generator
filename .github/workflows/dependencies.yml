# Dependency Management and Updates Workflow
# Automated dependency updates, security monitoring, and maintenance

name: Dependencies

on:
  schedule:
    # Run daily at 3 AM UTC for security updates
    - cron: '0 3 * * *'
    # Run weekly on Monday at 6 AM UTC for regular updates
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'security'
        type: choice
        options:
          - security
          - patch
          - minor
          - major
          - all
      create_pr:
        description: 'Create pull request for updates'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  security-events: write

jobs:
  # ==========================================================================
  # Analyze Current Dependencies
  # ==========================================================================
  analyze-dependencies:
    name: Analyze Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-security-updates: ${{ steps.security-check.outputs.has-updates }}
      has-regular-updates: ${{ steps.regular-check.outputs.has-updates }}
      update-summary: ${{ steps.summary.outputs.summary }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependency analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety pip-check-reqs pipdeptree

      - name: Generate current dependency tree
        run: |
          pipdeptree --json > current-dependencies.json
          pipdeptree --freeze > current-requirements.txt

      - name: Check for security vulnerabilities
        id: security-check
        run: |
          # Use pip-audit for comprehensive security scanning
          if pip-audit --format=json --output=security-audit.json; then
            echo "has-updates=false" >> $GITHUB_OUTPUT
          else
            echo "has-updates=true" >> $GITHUB_OUTPUT
          fi
          
          # Also check with Safety
          safety check --json --output=safety-check.json || true

      - name: Check for outdated packages
        id: regular-check
        run: |
          # Get list of outdated packages
          pip list --outdated --format=json > outdated-packages.json
          
          # Check if there are any outdated packages
          if [ $(jq length outdated-packages.json) -gt 0 ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate dependency summary
        id: summary
        run: |
          echo "# Dependency Analysis Summary" > summary.md
          echo "" >> summary.md
          echo "**Analysis Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> summary.md
          echo "" >> summary.md
          
          # Security vulnerabilities
          security_count=$(jq length security-audit.json 2>/dev/null || echo "0")
          echo "## Security Vulnerabilities: $security_count" >> summary.md
          
          if [ "$security_count" -gt 0 ]; then
            echo "⚠️ **Action Required:** Security vulnerabilities found" >> summary.md
            jq -r '.[] | "- \(.name) \(.version): \(.description)"' security-audit.json >> summary.md
          else
            echo "✅ No security vulnerabilities found" >> summary.md
          fi
          
          echo "" >> summary.md
          
          # Outdated packages
          outdated_count=$(jq length outdated-packages.json)
          echo "## Outdated Packages: $outdated_count" >> summary.md
          
          if [ "$outdated_count" -gt 0 ]; then
            echo "📦 Available updates:" >> summary.md
            jq -r '.[] | "- \(.name): \(.version) → \(.latest_version)"' outdated-packages.json >> summary.md
          else
            echo "✅ All packages are up to date" >> summary.md
          fi
          
          # Set output for summary
          summary_content=$(cat summary.md | base64 -w 0)
          echo "summary=$summary_content" >> $GITHUB_OUTPUT

      - name: Upload dependency analysis results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-analysis
          path: |
            current-dependencies.json
            current-requirements.txt
            security-audit.json
            safety-check.json
            outdated-packages.json
            summary.md
          retention-days: 30

  # ==========================================================================
  # Security Updates (High Priority)
  # ==========================================================================
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.has-security-updates == 'true' || github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit pip-upgrader

      - name: Apply security updates
        run: |
          # Create a new branch for security updates
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          branch_name="security-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
          
          # Apply security fixes
          pip-audit --fix --dry-run --format=json > security-fixes.json
          
          if [ -s security-fixes.json ]; then
            pip-audit --fix
            
            # Update requirements if they exist
            if [ -f "requirements.txt" ]; then
              pip freeze > requirements.txt
            fi
            
            # Commit changes
            git add .
            git commit -m "🔒 Apply security updates

            - Automated security vulnerability fixes
            - Updated by GitHub Actions on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            Fixes applied:
            $(jq -r '.fixes[] | "- \(.name): \(.old_version) → \(.new_version)"' security-fixes.json)
            "
          fi

      - name: Run tests after security updates
        run: |
          # Install updated dependencies
          pip install -e ".[test]"
          
          # Run critical tests
          python -m pytest tests/unit/ -x --tb=short || {
            echo "❌ Tests failed after security updates"
            echo "TESTS_PASSED=false" >> $GITHUB_ENV
            exit 1
          }
          
          echo "TESTS_PASSED=true" >> $GITHUB_ENV

      - name: Create security update PR
        if: env.TESTS_PASSED == 'true' && (github.event.inputs.create_pr != 'false')
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "🔒 Security Updates - $(date +%Y-%m-%d)"
          body: |
            ## Security Updates
            
            This PR contains automated security updates for vulnerable dependencies.
            
            ### Changes
            - Applied security fixes for vulnerable packages
            - All tests pass with updated dependencies
            - No breaking changes expected
            
            ### Review Checklist
            - [ ] Verify all tests pass
            - [ ] Check for any breaking changes
            - [ ] Review dependency changes
            - [ ] Test in staging environment
            
            **Auto-generated by GitHub Actions** 🤖
          labels: |
            security
            dependencies
            automated
          reviewers: |
            security-team
          assignees: |
            maintainer-team

  # ==========================================================================
  # Regular Updates (Lower Priority)
  # ==========================================================================
  regular-updates:
    name: Regular Updates
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: |
      github.event_name == 'schedule' && 
      github.event.schedule == '0 6 * * 1' ||
      github.event.inputs.update_type == 'patch' ||
      github.event.inputs.update_type == 'minor' ||
      github.event.inputs.update_type == 'major' ||
      github.event.inputs.update_type == 'all'
    strategy:
      matrix:
        update-type: [patch, minor]
        # Only run major updates if explicitly requested
        include:
          - update-type: major
            condition: ${{ github.event.inputs.update_type == 'major' || github.event.inputs.update_type == 'all' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-upgrader pur

      - name: Apply ${{ matrix.update-type }} updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          branch_name="${{ matrix.update-type }}-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
          echo "UPDATE_TYPE=${{ matrix.update-type }}" >> $GITHUB_ENV
          
          # Apply updates based on type
          case "${{ matrix.update-type }}" in
            "patch")
              pur -r requirements.txt --patch --dry-run > planned-updates.txt
              pur -r requirements.txt --patch
              ;;
            "minor")
              pur -r requirements.txt --minor --dry-run > planned-updates.txt
              pur -r requirements.txt --minor
              ;;
            "major")
              pur -r requirements.txt --dry-run > planned-updates.txt
              pur -r requirements.txt
              ;;
          esac

      - name: Test compatibility
        run: |
          # Install updated dependencies
          pip install -e ".[test]"
          
          # Run comprehensive tests
          python -m pytest tests/ --tb=short || {
            echo "❌ Tests failed after ${{ matrix.update-type }} updates"
            echo "TESTS_PASSED=false" >> $GITHUB_ENV
            exit 1
          }
          
          echo "TESTS_PASSED=true" >> $GITHUB_ENV

      - name: Commit updates
        if: env.TESTS_PASSED == 'true'
        run: |
          if [ -s planned-updates.txt ]; then
            git add .
            git commit -m "⬆️ ${{ matrix.update-type }} dependency updates

            - Automated ${{ matrix.update-type }} version updates
            - Updated by GitHub Actions on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            - All tests pass with updated dependencies
            
            Updates applied:
            $(cat planned-updates.txt)
            "
          fi

      - name: Create regular update PR
        if: env.TESTS_PASSED == 'true' && (github.event.inputs.create_pr != 'false')
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "⬆️ ${{ matrix.update-type }} dependency updates - $(date +%Y-%m-%d)"
          body: |
            ## ${{ matrix.update-type }} Dependency Updates
            
            This PR contains automated ${{ matrix.update-type }} version updates for dependencies.
            
            ### Changes
            - Updated dependencies to latest ${{ matrix.update-type }} versions
            - All tests pass with updated dependencies
            - No breaking changes expected for ${{ matrix.update-type }} updates
            
            ### Updates Applied
            ```
            $(cat planned-updates.txt)
            ```
            
            ### Review Checklist
            - [ ] Verify all tests pass
            - [ ] Check for any unexpected changes
            - [ ] Review changelog for updated packages
            - [ ] Test in staging environment
            
            **Auto-generated by GitHub Actions** 🤖
          labels: |
            dependencies
            ${{ matrix.update-type }}
            automated
          draft: ${{ matrix.update-type == 'major' }}

  # ==========================================================================
  # Dependency Audit and Reporting
  # ==========================================================================
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    needs: [security-updates, regular-updates]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit pipdeptree pip-licenses

      - name: Generate comprehensive audit report
        run: |
          echo "# Dependency Audit Report" > audit-report.md
          echo "" >> audit-report.md
          echo "**Report Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> audit-report.md
          echo "**Repository:** ${{ github.repository }}" >> audit-report.md
          echo "" >> audit-report.md
          
          # Install current dependencies
          pip install -e .
          
          # Dependency tree
          echo "## Dependency Tree" >> audit-report.md
          echo "\`\`\`" >> audit-report.md
          pipdeptree >> audit-report.md
          echo "\`\`\`" >> audit-report.md
          echo "" >> audit-report.md
          
          # License summary
          echo "## License Summary" >> audit-report.md
          pip-licenses --format=markdown >> audit-report.md
          echo "" >> audit-report.md
          
          # Security audit
          echo "## Security Audit" >> audit-report.md
          if pip-audit --format=json > security-audit.json; then
            echo "✅ No security vulnerabilities found" >> audit-report.md
          else
            echo "⚠️ Security vulnerabilities detected:" >> audit-report.md
            jq -r '.[] | "- **\(.name) \(.version)**: \(.description)"' security-audit.json >> audit-report.md
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit-report
          path: |
            audit-report.md
            security-audit.json
          retention-days: 90

      - name: Update dependency documentation
        run: |
          # Update DEPENDENCIES.md or similar file if it exists
          if [ -f "DEPENDENCIES.md" ]; then
            cp audit-report.md DEPENDENCIES.md
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add DEPENDENCIES.md
            git commit -m "📝 Update dependency documentation" || echo "No changes to commit"
          fi

  # ==========================================================================
  # Dependency Summary
  # ==========================================================================
  dependency-summary:
    name: Dependency Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [analyze-dependencies, security-updates, regular-updates, dependency-audit]
    steps:
      - name: Generate workflow summary
        run: |
          echo "# Dependency Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "**Update Type:** ${{ github.event.inputs.update_type }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analysis results
          if [ "${{ needs.analyze-dependencies.result }}" == "success" ]; then
            echo "✅ **Dependency Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
            echo "- Security Updates Needed: ${{ needs.analyze-dependencies.outputs.has-security-updates }}" >> $GITHUB_STEP_SUMMARY
            echo "- Regular Updates Available: ${{ needs.analyze-dependencies.outputs.has-regular-updates }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Analysis:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security updates
          if [ "${{ needs.security-updates.result }}" == "success" ]; then
            echo "✅ **Security Updates:** Applied successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-updates.result }}" == "failure" ]; then
            echo "❌ **Security Updates:** Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-updates.result }}" == "skipped" ]; then
            echo "⏭️ **Security Updates:** No updates needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Regular updates
          if [ "${{ needs.regular-updates.result }}" == "success" ]; then
            echo "✅ **Regular Updates:** Applied successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.regular-updates.result }}" == "failure" ]; then
            echo "❌ **Regular Updates:** Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.regular-updates.result }}" == "skipped" ]; then
            echo "⏭️ **Regular Updates:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.analyze-dependencies.outputs.has-security-updates }}" == "true" ]; then
            echo "🚨 **Action Required:** Review and merge security update PRs immediately" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- Review any created pull requests" >> $GITHUB_STEP_SUMMARY
          echo "- Check dependency audit report for license compliance" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor for any issues in staging/production" >> $GITHUB_STEP_SUMMARY

      - name: Notify on critical security updates
        if: needs.analyze-dependencies.outputs.has-security-updates == 'true'
        run: |
          echo "🚨 Critical security updates are available!"
          echo "Please review and merge the security update PR as soon as possible."
          # This could be extended to send Slack/email notifications