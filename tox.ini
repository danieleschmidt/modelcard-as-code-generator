[tox]
# Tox configuration for testing across multiple Python versions
minversion = 4.0
envlist = 
    py{39,310,311,312}
    lint
    type
    security
    docs
    coverage
    performance
isolated_build = true
skip_missing_interpreters = true

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
# Base test environment configuration
deps = 
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.0
    pytest-xdist>=3.3.0
    pytest-timeout>=2.1.0
    pytest-html>=3.2.0
    hypothesis>=6.82.0
    factory-boy>=3.3.0
    responses>=0.23.0
    freezegun>=1.2.0
    requests-mock>=1.11.0

extras = 
    test
    integrations

setenv =
    MCG_ENVIRONMENT = test
    MCG_LOG_LEVEL = DEBUG
    MCG_DEBUG = true
    MCG_CACHE_DIR = {envtmpdir}/cache
    MCG_OUTPUT_DIR = {envtmpdir}/output
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PYTHONPATH = {toxinidir}/src

commands = 
    python -m pytest {posargs:tests/}

[testenv:lint]
# Code linting environment
deps = 
    ruff>=0.1.0
    black>=23.0.0
    isort>=5.12.0
    flake8>=6.0.0
    flake8-docstrings>=1.7.0
    flake8-bugbear>=23.0.0
    flake8-comprehensions>=3.14.0
    flake8-simplify>=0.20.0
    pep8-naming>=0.13.0

commands = 
    ruff check src/ tests/
    black --check --diff src/ tests/
    isort --check-only --diff src/ tests/
    flake8 src/ tests/

[testenv:format]
# Code formatting environment
deps = 
    black>=23.0.0
    isort>=5.12.0
    ruff>=0.1.0

commands = 
    black src/ tests/
    isort src/ tests/
    ruff check --fix src/ tests/

[testenv:type]
# Type checking environment
deps = 
    mypy>=1.5.0
    types-requests>=2.31.0
    types-PyYAML>=6.0.0
    types-python-dateutil>=2.8.0
    types-toml>=0.10.0

commands = 
    mypy src/

[testenv:security]
# Security testing environment
deps = 
    bandit[toml]>=1.7.0
    safety>=2.3.0
    pip-audit>=2.6.0
    semgrep>=1.45.0

commands = 
    bandit -r src/ -f json -o {toxworkdir}/bandit-report.json
    safety check --json --output {toxworkdir}/safety-report.json
    pip-audit --format=json --output={toxworkdir}/pip-audit-report.json
    # semgrep --config=auto src/ --json --output={toxworkdir}/semgrep-report.json

[testenv:docs]
# Documentation building environment
deps = 
    mkdocs>=1.5.0
    mkdocs-material>=9.2.0
    mkdocs-mermaid2-plugin>=1.1.0
    mkdocs-include-markdown-plugin>=6.0.0
    mkdocstrings[python]>=0.23.0
    mike>=1.1.0

changedir = {toxinidir}
commands = 
    mkdocs build --strict

[testenv:docs-serve]
# Documentation development server
deps = {[testenv:docs]deps}
commands = 
    mkdocs serve --dev-addr 0.0.0.0:8000

[testenv:coverage]
# Coverage reporting environment
deps = 
    coverage[toml]>=7.0.0
    pytest>=7.4.0
    pytest-cov>=4.1.0

setenv = 
    {[testenv]setenv}
    COVERAGE_FILE = {toxworkdir}/.coverage

commands = 
    coverage erase
    pytest --cov=src/modelcard_generator --cov-report=
    coverage combine {toxworkdir}/.coverage.*
    coverage report --show-missing
    coverage html -d {toxworkdir}/htmlcov
    coverage xml -o {toxworkdir}/coverage.xml

[testenv:performance]
# Performance testing environment
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0
    psutil>=5.9.0

commands = 
    pytest tests/performance/ --benchmark-only --benchmark-sort=mean

[testenv:integration]
# Integration testing environment
deps = 
    {[testenv]deps}
    docker>=6.0.0
    testcontainers>=3.7.0

commands = 
    pytest tests/integration/ {posargs}

[testenv:e2e]
# End-to-end testing environment
deps = 
    {[testenv]deps}
    selenium>=4.0.0
    requests>=2.25.0

commands = 
    pytest tests/e2e/ {posargs}

[testenv:py39-minimum]
# Test with minimum supported dependencies
deps = 
    click==8.0.0
    jinja2==3.1.0
    pydantic==2.0.0
    pyyaml==6.0
    requests==2.25.0
    rich==13.0.0
    jsonschema==4.0.0
    packaging==21.0
    python-dateutil==2.8.0
    toml==0.10.0
    {[testenv]deps}

commands = {[testenv]commands}

[testenv:build]
# Package building environment
deps = 
    build>=0.10.0
    wheel>=0.41.0
    twine>=4.0.0
    check-manifest>=0.49.0

commands = 
    check-manifest
    python -m build
    twine check dist/*

[testenv:release]
# Release environment
deps = 
    {[testenv:build]deps}
    bump2version>=1.0.0
    git-cliff>=1.4.0

commands = 
    {[testenv:build]commands}
    # Additional release commands would go here

[testenv:clean]
# Clean environment
deps = 
    pyclean>=2.7.0

commands = 
    pyclean {toxinidir}
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.ruff_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"

# Tool-specific configurations

[flake8]
# Flake8 configuration
max-line-length = 88
select = E,W,F,B,C4,UP,Q
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    B008,  # do not perform function calls in argument defaults
per-file-ignores = 
    __init__.py:F401
    tests/**/*:B011,B018,F401,F811
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    .eggs,
    *.egg,
    .tox,
    .venv,
    venv,
    .pytest_cache,
    .mypy_cache,
    node_modules,
    migrations

[coverage:run]
# Coverage run configuration
source = src/modelcard_generator
omit = 
    */tests/*
    */test_*
    */__main__.py
    */setup.py
    */venv/*
    */.venv/*
    */.tox/*
branch = true
parallel = true

[coverage:report]
# Coverage report configuration
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
precision = 2
skip_covered = true
show_missing = true
sort = Cover

[coverage:html]
# Coverage HTML report configuration
directory = htmlcov

[coverage:xml]
# Coverage XML report configuration
output = coverage.xml