[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "modelcard-as-code-generator"
version = "1.0.0"
description = "Automated generation of Model Cards as executable, versioned artifacts"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragonlabs.com"},
]
maintainers = [
    {name = "Terragon Labs Team", email = "team@terragonlabs.com"},
]
keywords = [
    "machine-learning",
    "model-cards",
    "documentation",
    "compliance",
    "mlops",
    "automation",
    "ci-cd"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Quality Assurance",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "jinja2>=3.1.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "requests>=2.25.0",
    "rich>=13.0.0",
    "jsonschema>=4.0.0",
    "packaging>=21.0",
    "python-dateutil>=2.8.0",
    "toml>=0.10.0",
]

[project.optional-dependencies]
cli = [
    "typer>=0.9.0",
    "rich-click>=1.6.0",
]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",
    "responses>=0.23.0",
    "freezegun>=1.2.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocs-include-markdown-plugin>=6.0.0",
    "mkdocstrings[python]>=0.23.0",
    "mike>=1.1.0",
]
integrations = [
    "mlflow>=2.5.0",
    "wandb>=0.15.0",
    "huggingface-hub>=0.16.0",
    "dvc>=3.0.0",
    "gitpython>=3.1.0",
]
all = [
    "modelcard-as-code-generator[cli,dev,test,docs,integrations]",
]

[project.urls]
"Homepage" = "https://github.com/terragonlabs/modelcard-as-code-generator"
"Documentation" = "https://docs.terragonlabs.com/modelcard-generator"
"Repository" = "https://github.com/terragonlabs/modelcard-as-code-generator"
"Bug Reports" = "https://github.com/terragonlabs/modelcard-as-code-generator/issues"
"Changelog" = "https://github.com/terragonlabs/modelcard-as-code-generator/blob/main/CHANGELOG.md"

[project.scripts]
mcg = "modelcard_generator.cli:main"
modelcard-generator = "modelcard_generator.cli:main"

[project.entry-points."modelcard_generator.templates"]
huggingface = "modelcard_generator.templates:HuggingFaceTemplate"
google = "modelcard_generator.templates:GoogleModelCardTemplate"
eu_cra = "modelcard_generator.templates:EUCRATemplate"

[project.entry-points."modelcard_generator.validators"]
schema = "modelcard_generator.validators:SchemaValidator"
content = "modelcard_generator.validators:ContentValidator"
compliance = "modelcard_generator.validators:ComplianceValidator"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"modelcard_generator" = [
    "templates/**/*.j2",
    "templates/**/*.json",
    "schemas/**/*.json",
    "py.typed",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | node_modules
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["modelcard_generator"]
known_third_party = ["click", "jinja2", "pydantic", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "mlflow.*",
    "wandb.*",
    "dvc.*",
    "responses.*",
    "factory_boy.*",
    "freezegun.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=modelcard_generator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "gpu: Tests requiring GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/modelcard_generator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018", "F401", "F811"]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]

# Safety configuration
[tool.safety]
ignore = []

[tool.setuptools_scm]
write_to = "src/modelcard_generator/_version.py"